---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC: Interface Endpoint, a cloudonaut.io template'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack
      - ParentClientStack
      - ParentAlertStack
    - Label:
        default: 'Endpoint Parameters'
      Parameters:
      - ServiceName
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  ParentClientStack:
    Description: 'Optional stack name of parent client stack based on state/client-sg.yaml template.'
    Type: String
    Default: ''
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.'
    Type: String
    Default: ''
  ServiceName:
    Description: 'The name of the service.'
    Type: String
    AllowedValues: # generate list with aws --region us-east-1 ec2 describe-vpc-endpoint-services --query 'ServiceDetails[].ServiceName'
    - 'access-analyzer'
    - account
    - 'acm-pca'
    - 'airflow.api'
    - 'airflow.env'
    - 'airflow.ops'
    - 'analytics-omics'
    - 'app-integrations'
    - 'application-autoscaling'
    - appmesh
    - 'appmesh-envoy-management'
    - apprunner
    - 'apprunner.requests'
    - 'appstream.api'
    - 'appstream.streaming'
    - 'appsync-api'
    - aps
    - 'aps-workspaces'
    - athena
    - auditmanager
    - autoscaling
    - 'autoscaling-plans'
    - awsconnector
    - backup
    - 'backup-gateway'
    - batch
    - bedrock
    - 'bedrock-runtime'
    - billingconductor
    - braket
    - cases
    - cassandra
    - 'cassandra-fips'
    - cleanrooms
    - cloudcontrolapi
    - 'cloudcontrolapi-fips'
    - clouddirectory
    - cloudformation
    - cloudhsmv2
    - cloudtrail
    - 'codeartifact.api'
    - 'codeartifact.repositories'
    - codebuild
    - 'codebuild-fips'
    - codecommit
    - 'codecommit-fips'
    - codedeploy
    - 'codedeploy-commands-secure'
    - 'codeguru-profiler'
    - 'codeguru-reviewer'
    - codepipeline
    - 'codestar-connections.api'
    - codewhisperer
    - comprehend
    - comprehendmedical
    - config
    - 'connect-campaigns'
    - console
    - 'control-storage-omics'
    - 'data-servicediscovery'
    - 'data-servicediscovery-fips'
    - databrew
    - dataexchange
    - datasync
    - datazone
    - 'deviceadvisor.iot'
    - 'devops-guru'
    - dms
    - 'dms-fips'
    - drs
    - ds
    - dynamodb
    - ebs
    - ec2
    - ec2messages
    - 'ecr.api'
    - 'ecr.dkr'
    - ecs
    - 'ecs-agent'
    - 'ecs-telemetry'
    - eks
    - 'elastic-inference.runtime'
    - elasticache
    - 'elasticache-fips'
    - elasticbeanstalk
    - 'elasticbeanstalk-health'
    - elasticfilesystem
    - 'elasticfilesystem-fips'
    - elasticloadbalancing
    - elasticmapreduce
    - 'email-smtp'
    - 'emr-containers'
    - 'emr-serverless'
    - events
    - evidently
    - 'evidently-dataplane'
    - 'execute-api'
    - finspace
    - 'finspace-api'
    - fis
    - forecast
    - 'forecast-fips'
    - forecastquery
    - 'forecastquery-fips'
    - frauddetector
    - fsx
    - 'fsx-fips'
    - 'git-codecommit'
    - 'git-codecommit-fips'
    - glue
    - grafana
    - 'grafana-workspace'
    - greengrass
    - groundstation
    - 'guardduty-data'
    - 'guardduty-data-fips'
    - healthlake
    - identitystore
    - imagebuilder
    - inspector2
    - 'iot.data'
    - 'iot.fleethub.api'
    - iotfleetwise
    - iotroborunner
    - 'iotsitewise.api'
    - 'iotsitewise.data'
    - 'iottwinmaker.api'
    - 'iottwinmaker.data'
    - 'iotwireless.api'
    - kendra
    - 'kinesis-firehose'
    - 'kinesis-streams'
    - kms
    - 'kms-fips'
    - lakeformation
    - lambda
    - 'license-manager'
    - 'license-manager-fips'
    - logs
    - lookoutequipment
    - lookoutmetrics
    - lookoutvision
    - 'lorawan.cups'
    - 'lorawan.lns'
    - m2
    - macie2
    - 'managedblockchain-query'
    - 'managedblockchain.bitcoin.mainnet'
    - 'managedblockchain.bitcoin.testnet'
    - mediaconnect
    - 'medical-imaging'
    - 'memory-db'
    - 'memorydb-fips'
    - mgn
    - 'migrationhub-orchestrator'
    - 'migrationhub-strategy'
    - 'models-v2-lex'
    - monitoring
    - nimble
    - panorama
    - 'payment-cryptography.controlplane'
    - 'payment-cryptography.dataplane'
    - 'pca-connector-ad'
    - personalize
    - 'personalize-events'
    - 'personalize-runtime'
    - pinpoint
    - 'pinpoint-sms-voice-v2'
    - polly
    - 'private-networks'
    - profile
    - proton
    - 'qldb.session'
    - rds
    - 'rds-data'
    - redshift
    - 'redshift-data'
    - 'redshift-fips'
    - 'refactor-spaces'
    - rekognition
    - 'rekognition-fips'
    - robomaker
    - rolesanywhere
    - rum
    - 'rum-dataplane'
    - 'runtime-medical-imaging'
    - 'runtime-v2-lex'
    - 'sagemaker.api'
    - 'sagemaker.featurestore-runtime'
    - 'sagemaker.metrics'
    - 'sagemaker.runtime'
    - 'sagemaker.runtime-fips'
    - secretsmanager
    - securityhub
    - servicecatalog
    - 'servicecatalog-appregistry'
    - servicediscovery
    - 'servicediscovery-fips'
    - signin
    - simspaceweaver
    - 'snow-device-management'
    - sns
    - sqs
    - ssm
    - 'ssm-contacts'
    - 'ssm-incidents'
    - ssmmessages
    - states
    - 'storage-omics'
    - storagegateway
    - 'streaming-rekognition'
    - 'streaming-rekognition-fips'
    - sts
    - swf
    - 'swf-fips'
    - 'sync-states'
    - synthetics
    - 'tags-omics'
    - textract
    - 'textract-fips'
    - tnb
    - transcribe
    - transcribestreaming
    - transfer
    - 'transfer.server'
    - translate
    - verifiedpermissions
    - voiceid
    - 'vpc-lattice'
    - wisdom
    - 'workflows-omics'
    - workspaces
    - xray
Conditions:
  HasParentClientStack: !Not [!Equals [!Ref ParentClientStack, '']]
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]
  UseEmailSMTP: !Equals [!Ref ServiceName, 'email-smtp']
Resources:
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName : !Sub '${AWS::StackName}'
      GroupDescription: !Ref 'AWS::StackName'
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
      SecurityGroupIngress: !If
      - HasParentClientStack
      - !If
        - UseEmailSMTP
        - - IpProtocol: tcp
            FromPort: 25
            ToPort: 25
            SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentClientStack}-ClientSecurityGroup'}
          - IpProtocol: tcp
            FromPort: 465
            ToPort: 465
            SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentClientStack}-ClientSecurityGroup'}
          - IpProtocol: tcp
            FromPort: 587
            ToPort: 587
            SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentClientStack}-ClientSecurityGroup'}
          - IpProtocol: tcp
            FromPort: 2465
            ToPort: 2465
            SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentClientStack}-ClientSecurityGroup'}
          - IpProtocol: tcp
            FromPort: 2587
            ToPort: 2587
            SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentClientStack}-ClientSecurityGroup'}
        - - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentClientStack}-ClientSecurityGroup'}
      - !If
        - UseEmailSMTP
        - - IpProtocol: tcp
            FromPort: 25
            ToPort: 25
            CidrIp: {'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'}
          - IpProtocol: tcp
            FromPort: 465
            ToPort: 465
            CidrIp: {'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'}
          - IpProtocol: tcp
            FromPort: 587
            ToPort: 587
            CidrIp: {'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'}
          - IpProtocol: tcp
            FromPort: 2465
            ToPort: 2465
            CidrIp: {'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'}
          - IpProtocol: tcp
            FromPort: 2587
            ToPort: 2587
            CidrIp: {'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'}
        - - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: {'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'}
  Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds: [!Ref SecurityGroup]
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.${ServiceName}'
      SubnetIds: !Split [',', {'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetsPrivate'}]
      VpcEndpointType: Interface
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
  AlarmEndpointPacketsDropped:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: !Sub 'VPC Interface endpoint ${ServiceName} dropped packets. This could indicate that the endpoint or endpoint service is unhealthy.'
      Namespace: 'AWS/PrivateLinkEndpoints'
      MetricName: PacketsDropped
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: 'Endpoint Type'
        Value: Interface
      - Name: 'Service Name'
        Value: !Sub 'com.amazonaws.${AWS::Region}.${ServiceName}'
      - Name: 'VPC Endpoint Id'
        Value: !Ref Endpoint
      - Name: 'VPC Id'
        Value: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
  AlarmEndpointRstPacketsReceived:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: !Sub 'VPC Interface endpoint ${ServiceName} received RST packets. This could indicate that the endpoint service is unhealthy.'
      Namespace: 'AWS/PrivateLinkEndpoints'
      MetricName: RstPacketsReceived
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: 'Endpoint Type'
        Value: Interface
      - Name: 'Service Name'
        Value: !Sub 'com.amazonaws.${AWS::Region}.${ServiceName}'
      - Name: 'VPC Endpoint Id'
        Value: !Ref Endpoint
      - Name: 'VPC Id'
        Value: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
  AlarmEndpointBandwidth:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      AlarmDescription: !Sub 'VPC Interface endpoint ${ServiceName} bandwidth utilization is over 80%'
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Metrics:
      - Id: bytesProcessed
        Label: BytesProcessed
        MetricStat:
          Metric:
            Namespace: 'AWS/PrivateLinkEndpoints'
            MetricName: BytesProcessed # bytes per minute
            Dimensions:
            - Name: 'Endpoint Type'
              Value: Interface
            - Name: 'Service Name'
              Value: !Sub 'com.amazonaws.${AWS::Region}.${ServiceName}'
            - Name: 'VPC Endpoint Id'
              Value: !Ref Endpoint
            - Name: 'VPC Id'
              Value: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
          Period: 60
          Stat: Sum
        ReturnData: false
      - Expression: 'bytesProcessed/60*8/1000/1000/1000' # to Gbit/s
        Id: 'bandwidth'
        Label: 'Bandwidth'
        ReturnData: true
      Threshold: 80 # hard limit is 100 Gbit/s
      TreatMissingData: notBreaching
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'vpc/vpc-endpoint'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  Endpoint:
    Description: 'The VPC endpoint to a service.'
    Value: !Ref Endpoint
    Export:
      Name: !Sub '${AWS::StackName}-Endpoint'
